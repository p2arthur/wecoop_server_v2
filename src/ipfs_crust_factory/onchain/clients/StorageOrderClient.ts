/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app';
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client';
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec';
import type {
  SendTransactionFrom,
  SendTransactionResult,
  TransactionToSign,
} from '@algorandfoundation/algokit-utils/types/transaction';
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk';
import {
  Algodv2,
  AtomicTransactionComposer,
  OnApplicationComplete,
  Transaction,
} from 'algosdk';
export const APP_SPEC: AppSpec = {
  hints: {
    'create()void': {
      call_config: {
        no_op: 'CREATE',
      },
    },
    'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_base_price(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_byte_price(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_size_limit(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_service_rate(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'set_algo_cru_price(uint64,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'add_order_node(address)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'remove_order_node(address)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'get_random_order_node()address': {
      read_only: true,
      call_config: {
        no_op: 'CALL',
      },
    },
    'get_price(uint64,bool)uint64': {
      read_only: true,
      call_config: {
        no_op: 'CALL',
      },
    },
    'place_order(pay,account,string,uint64,bool)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu',
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 7,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        algo_price: {
          type: 'uint64',
          key: 'algo_price',
          descr: 'ALGO price',
        },
        base_price: {
          type: 'uint64',
          key: 'base_price',
          descr: 'Storage order base price per file',
        },
        byte_price: {
          type: 'uint64',
          key: 'byte_price',
          descr: 'Storage order byte price',
        },
        cru_price: {
          type: 'uint64',
          key: 'cru_price',
          descr: 'CRU price',
        },
        node_num: {
          type: 'uint64',
          key: 'node_num',
          descr: 'Order node number',
        },
        service_rate: {
          type: 'uint64',
          key: 'service_rate',
          descr: 'Service rate for the real place order node',
        },
        size_limit: {
          type: 'uint64',
          key: 'size_limit',
          descr: 'File size limit',
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: 'StorageOrder',
    methods: [
      {
        name: 'create',
        args: [],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'bootstrap',
        args: [
          {
            type: 'pay',
            name: 'seed',
          },
          {
            type: 'uint64',
            name: 'base_price',
          },
          {
            type: 'uint64',
            name: 'byte_price',
          },
          {
            type: 'uint64',
            name: 'size_limit',
          },
          {
            type: 'uint64',
            name: 'service_rate',
          },
          {
            type: 'uint64',
            name: 'algo_price',
          },
          {
            type: 'uint64',
            name: 'cru_price',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_base_price',
        args: [
          {
            type: 'uint64',
            name: 'price',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_byte_price',
        args: [
          {
            type: 'uint64',
            name: 'price',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_size_limit',
        args: [
          {
            type: 'uint64',
            name: 'size',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_service_rate',
        args: [
          {
            type: 'uint64',
            name: 'rate',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_algo_cru_price',
        args: [
          {
            type: 'uint64',
            name: 'algo_price',
          },
          {
            type: 'uint64',
            name: 'cru_price',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'add_order_node',
        args: [
          {
            type: 'address',
            name: 'address',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'remove_order_node',
        args: [
          {
            type: 'address',
            name: 'address',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'get_random_order_node',
        args: [],
        returns: {
          type: 'address',
        },
      },
      {
        name: 'get_price',
        args: [
          {
            type: 'uint64',
            name: 'size',
          },
          {
            type: 'bool',
            name: 'is_permanent',
          },
        ],
        returns: {
          type: 'uint64',
        },
      },
      {
        name: 'place_order',
        args: [
          {
            type: 'pay',
            name: 'seed',
          },
          {
            type: 'account',
            name: 'merchant',
          },
          {
            type: 'string',
            name: 'cid',
          },
          {
            type: 'uint64',
            name: 'size',
          },
          {
            type: 'bool',
            name: 'is_permanent',
          },
        ],
        returns: {
          type: 'void',
        },
      },
    ],
    networks: {},
    desc: 'This is storage order contract used to place order',
  },
  bare_call_config: {},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | 'delete_application'
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | 'update_application'
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the StorageOrder smart contract.
 */
export type StorageOrder = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'create()void' | 'create',
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      | 'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'
      | 'bootstrap',
      {
        argsObj: {
          seed:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          base_price: bigint | number;
          byte_price: bigint | number;
          size_limit: bigint | number;
          service_rate: bigint | number;
          algo_price: bigint | number;
          cru_price: bigint | number;
        };
        argsTuple: [
          seed:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          base_price: bigint | number,
          byte_price: bigint | number,
          size_limit: bigint | number,
          service_rate: bigint | number,
          algo_price: bigint | number,
          cru_price: bigint | number,
        ];
        returns: void;
      }
    > &
    Record<
      'set_base_price(uint64)void' | 'set_base_price',
      {
        argsObj: {
          price: bigint | number;
        };
        argsTuple: [price: bigint | number];
        returns: void;
      }
    > &
    Record<
      'set_byte_price(uint64)void' | 'set_byte_price',
      {
        argsObj: {
          price: bigint | number;
        };
        argsTuple: [price: bigint | number];
        returns: void;
      }
    > &
    Record<
      'set_size_limit(uint64)void' | 'set_size_limit',
      {
        argsObj: {
          size: bigint | number;
        };
        argsTuple: [size: bigint | number];
        returns: void;
      }
    > &
    Record<
      'set_service_rate(uint64)void' | 'set_service_rate',
      {
        argsObj: {
          rate: bigint | number;
        };
        argsTuple: [rate: bigint | number];
        returns: void;
      }
    > &
    Record<
      'set_algo_cru_price(uint64,uint64)void' | 'set_algo_cru_price',
      {
        argsObj: {
          algo_price: bigint | number;
          cru_price: bigint | number;
        };
        argsTuple: [algo_price: bigint | number, cru_price: bigint | number];
        returns: void;
      }
    > &
    Record<
      'add_order_node(address)void' | 'add_order_node',
      {
        argsObj: {
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    > &
    Record<
      'remove_order_node(address)void' | 'remove_order_node',
      {
        argsObj: {
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    > &
    Record<
      'get_random_order_node()address' | 'get_random_order_node',
      {
        argsObj: {};
        argsTuple: [];
        returns: string;
      }
    > &
    Record<
      'get_price(uint64,bool)uint64' | 'get_price',
      {
        argsObj: {
          size: bigint | number;
          is_permanent: boolean;
        };
        argsTuple: [size: bigint | number, is_permanent: boolean];
        returns: bigint;
      }
    > &
    Record<
      'place_order(pay,account,string,uint64,bool)void' | 'place_order',
      {
        argsObj: {
          seed:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          merchant: string | Uint8Array;
          cid: string;
          size: bigint | number;
          is_permanent: boolean;
        };
        argsTuple: [
          seed:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          merchant: string | Uint8Array,
          cid: string,
          size: bigint | number,
          is_permanent: boolean,
        ];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * ALGO price
       */
      algo_price?: IntegerState;
      /**
       * Storage order base price per file
       */
      base_price?: IntegerState;
      /**
       * Storage order byte price
       */
      byte_price?: IntegerState;
      /**
       * CRU price
       */
      cru_price?: IntegerState;
      /**
       * Order node number
       */
      node_num?: IntegerState;
      /**
       * Service rate for the real place order node
       */
      service_rate?: IntegerState;
      /**
       * File size limit
       */
      size_limit?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type StorageOrderSig = keyof StorageOrder['methods'];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StorageOrderSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the StorageOrder smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StorageOrderSig> =
  StorageOrder['methods'][TSignature]['argsObj' | 'argsTuple'];
/**
 * Maps a method signature from the StorageOrder smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StorageOrderSig> =
  StorageOrder['methods'][TSignature]['returns'];

/**
 * A factory for available 'create' calls
 */
export type StorageOrderCreateCalls =
  (typeof StorageOrderCallFactory)['create'];
/**
 * Defines supported create methods for this smart contract
 */
export type StorageOrderCreateCallParams = TypedCallParams<'create()void'> &
  OnCompleteNoOp;
/**
 * Defines arguments required for the deploy method.
 */
export type StorageOrderDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: StorageOrderCreateCalls,
  ) => StorageOrderCreateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StorageOrderCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the StorageOrder smart contract using the create()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(
        args: MethodArgs<'create()void'>,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method: 'create()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(
    args: MethodArgs<'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method:
        'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.seed,
            args.base_price,
            args.byte_price,
            args.size_limit,
            args.service_rate,
            args.algo_price,
            args.cru_price,
          ],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the set_base_price(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBasePrice(
    args: MethodArgs<'set_base_price(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_base_price(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the set_byte_price(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBytePrice(
    args: MethodArgs<'set_byte_price(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_byte_price(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the set_size_limit(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSizeLimit(
    args: MethodArgs<'set_size_limit(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_size_limit(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.size],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the set_service_rate(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setServiceRate(
    args: MethodArgs<'set_service_rate(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_service_rate(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rate],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the set_algo_cru_price(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAlgoCruPrice(
    args: MethodArgs<'set_algo_cru_price(uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_algo_cru_price(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.algo_price, args.cru_price],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the add_order_node(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addOrderNode(
    args: MethodArgs<'add_order_node(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'add_order_node(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the remove_order_node(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeOrderNode(
    args: MethodArgs<'remove_order_node(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'remove_order_node(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the get_random_order_node()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRandomOrderNode(
    args: MethodArgs<'get_random_order_node()address'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'get_random_order_node()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the get_price(uint64,bool)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPrice(
    args: MethodArgs<'get_price(uint64,bool)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'get_price(uint64,bool)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.size, args.is_permanent],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the place_order(pay,account,string,uint64,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static placeOrder(
    args: MethodArgs<'place_order(pay,account,string,uint64,bool)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'place_order(pay,account,string,uint64,bool)void' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.seed, args.merchant, args.cid, args.size, args.is_permanent],
      ...params,
    };
  }
}

/**
 * A client to make calls to the StorageOrder smart contract
 */
export class StorageOrderClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `StorageOrderClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof StorageOrder['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the StorageOrder smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: StorageOrderDeployArgs & AppClientDeployCoreParams = {},
  ): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StorageOrderCallFactory.create);
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the StorageOrder smart contract using the create()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(
        args: MethodArgs<'create()void'>,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ): Promise<AppCallTransactionResultOfType<MethodReturn<'create()void'>>> {
        return $this.mapReturnValue(
          await $this.appClient.create(
            StorageOrderCallFactory.create.create(args, params),
          ),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the StorageOrder smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(
    args: MethodArgs<'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.bootstrap(args, params));
  }

  /**
   * Calls the set_base_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBasePrice(
    args: MethodArgs<'set_base_price(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.setBasePrice(args, params));
  }

  /**
   * Calls the set_byte_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBytePrice(
    args: MethodArgs<'set_byte_price(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.setBytePrice(args, params));
  }

  /**
   * Calls the set_size_limit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSizeLimit(
    args: MethodArgs<'set_size_limit(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.setSizeLimit(args, params));
  }

  /**
   * Calls the set_service_rate(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setServiceRate(
    args: MethodArgs<'set_service_rate(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.setServiceRate(args, params));
  }

  /**
   * Calls the set_algo_cru_price(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAlgoCruPrice(
    args: MethodArgs<'set_algo_cru_price(uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.setAlgoCruPrice(args, params));
  }

  /**
   * Calls the add_order_node(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addOrderNode(
    args: MethodArgs<'add_order_node(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.addOrderNode(args, params));
  }

  /**
   * Calls the remove_order_node(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeOrderNode(
    args: MethodArgs<'remove_order_node(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.removeOrderNode(args, params));
  }

  /**
   * Calls the get_random_order_node()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRandomOrderNode(
    args: MethodArgs<'get_random_order_node()address'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.getRandomOrderNode(args, params));
  }

  /**
   * Calls the get_price(uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPrice(
    args: MethodArgs<'get_price(uint64,bool)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.getPrice(args, params));
  }

  /**
   * Calls the place_order(pay,account,string,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public placeOrder(
    args: MethodArgs<'place_order(pay,account,string,uint64,bool)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(StorageOrderCallFactory.placeOrder(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string,
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!('valueRaw' in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`,
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string,
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ('valueRaw' in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`,
      );
    return {
      asBigInt() {
        return typeof value.value === 'bigint'
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === 'bigint'
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<StorageOrder['state']['global']> {
    const state = await this.appClient.getGlobalState();
    return {
      get algo_price() {
        return StorageOrderClient.getIntegerState(state, 'algo_price');
      },
      get base_price() {
        return StorageOrderClient.getIntegerState(state, 'base_price');
      },
      get byte_price() {
        return StorageOrderClient.getIntegerState(state, 'byte_price');
      },
      get cru_price() {
        return StorageOrderClient.getIntegerState(state, 'cru_price');
      },
      get node_num() {
        return StorageOrderClient.getIntegerState(state, 'node_num');
      },
      get service_rate() {
        return StorageOrderClient.getIntegerState(state, 'service_rate');
      },
      get size_limit() {
        return StorageOrderClient.getIntegerState(state, 'size_limit');
      },
    };
  }

  public compose(): StorageOrderComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      bootstrap(
        args: MethodArgs<'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setBasePrice(
        args: MethodArgs<'set_base_price(uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setBasePrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setBytePrice(
        args: MethodArgs<'set_byte_price(uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setBytePrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setSizeLimit(
        args: MethodArgs<'set_size_limit(uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setSizeLimit(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setServiceRate(
        args: MethodArgs<'set_service_rate(uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setServiceRate(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setAlgoCruPrice(
        args: MethodArgs<'set_algo_cru_price(uint64,uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setAlgoCruPrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addOrderNode(
        args: MethodArgs<'add_order_node(address)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.addOrderNode(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      removeOrderNode(
        args: MethodArgs<'remove_order_node(address)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.removeOrderNode(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      getRandomOrderNode(
        args: MethodArgs<'get_random_order_node()address'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.getRandomOrderNode(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      getPrice(
        args: MethodArgs<'get_price(uint64,bool)uint64'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.getPrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      placeOrder(
        args: MethodArgs<'place_order(pay,account,string,uint64,bool)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.placeOrder(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender,
            ),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate() {
        await promiseChain;
        const result = await atc.simulate(client.algod);
        return result;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
    } as unknown as StorageOrderComposer;
  }
}
export type StorageOrderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [
      ...TReturns,
      MethodReturn<'bootstrap(pay,uint64,uint64,uint64,uint64,uint64,uint64)void'>,
    ]
  >;

  /**
   * Calls the set_base_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBasePrice(
    args: MethodArgs<'set_base_price(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'set_base_price(uint64)void'>]
  >;

  /**
   * Calls the set_byte_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBytePrice(
    args: MethodArgs<'set_byte_price(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'set_byte_price(uint64)void'>]
  >;

  /**
   * Calls the set_size_limit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSizeLimit(
    args: MethodArgs<'set_size_limit(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'set_size_limit(uint64)void'>]
  >;

  /**
   * Calls the set_service_rate(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setServiceRate(
    args: MethodArgs<'set_service_rate(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'set_service_rate(uint64)void'>]
  >;

  /**
   * Calls the set_algo_cru_price(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAlgoCruPrice(
    args: MethodArgs<'set_algo_cru_price(uint64,uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'set_algo_cru_price(uint64,uint64)void'>]
  >;

  /**
   * Calls the add_order_node(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addOrderNode(
    args: MethodArgs<'add_order_node(address)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'add_order_node(address)void'>]
  >;

  /**
   * Calls the remove_order_node(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeOrderNode(
    args: MethodArgs<'remove_order_node(address)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'remove_order_node(address)void'>]
  >;

  /**
   * Calls the get_random_order_node()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRandomOrderNode(
    args: MethodArgs<'get_random_order_node()address'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'get_random_order_node()address'>]
  >;

  /**
   * Calls the get_price(uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPrice(
    args: MethodArgs<'get_price(uint64,bool)uint64'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [...TReturns, MethodReturn<'get_price(uint64,bool)uint64'>]
  >;

  /**
   * Calls the place_order(pay,account,string,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  placeOrder(
    args: MethodArgs<'place_order(pay,account,string,uint64,bool)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<
    [
      ...TReturns,
      MethodReturn<'place_order(pay,account,string,uint64,bool)void'>,
    ]
  >;

  /**
   * Makes a clear_state call to an existing instance of the StorageOrder smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
  ): StorageOrderComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): StorageOrderComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StorageOrderComposerSimulateResult>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<StorageOrderComposerResults<TReturns>>;
};
export type StorageOrderComposerSimulateResult = {
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type StorageOrderComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
